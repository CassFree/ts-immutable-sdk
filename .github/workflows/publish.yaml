name: Publish to NPM

on:
  workflow_dispatch:
    inputs:
      release_type:
        type: choice
        description: Release Type
        options:
          - alpha
          - release
        required: true
        default: alpha
      upgrade_type:
        type: choice
        description: Upgrade Type
        options:
          - patch 
          - minor
          - major
          - none
        required: false
        default: patch
      dry_run:
        type: boolean
        description: '(Optional) Dry run'
        required: false
        default: false

jobs:
  Publish:
    name: Publish Workflow
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Get tags
        run: git fetch --tags

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Cache node modules
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build
        run: yarn build

      - name: Check Single Package Version Policy
        run: yarn syncpack:check

      - name: Lint
        run: yarn lint

      - name: Build
        run: yarn build

      - name: Typecheck
        run: yarn typecheck

      # - name: Test
      #   run: yarn test

      - name: Workout next version string
        run: |
          upgrade_type=${{ github.event.inputs.upgrade_type }}
          if [ ${{ contains(github.event.inputs.upgrade_type, 'none') }} == true ]
          then
            upgrade_type=""
            if [ ${{ contains(github.event.inputs.release_type, 'release') }} == true ]
            then
              echo "A release_type of release should be one of patch, minor, major"
              exit 1
            fi
          fi
          ./.github/scripts/version-up.sh --${{github.event.inputs.release_type }} --$upgrade_type --apply $( ${{ contains(github.event.inputs.release_type, 'alpha') }} && echo '--revision' || echo '')
          echo "$(git push --tags)"
        shell: bash

      - name: Get next version string
        id: version
        run: |
          echo "NEXT_VERSION=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT
          
      - name: Update package.json version for pre (alpha) releases
        if: contains(github.event.inputs.release_type, 'alpha')
        run: |
          tmp=$(mktemp)
          jq '.version = "${{steps.version.outputs.NEXT_VERSION}}"' ./sdk/package.json > "$tmp" && mv "$tmp" ./sdk/package.json
          
      # - name: Commit package.json with new version
      #   if: contains(github.event.inputs.release_type, 'release')
      #   uses: stefanzweifel/git-auto-commit-action@v4
      #   with:
      #     commit_message: Updated Changelog to version ${{steps.version.outputs.NEXT_VERSION}}

      - name: Pre Release Step
        if: contains(github.event.inputs.release_type, 'alpha')
        uses: JS-DevTools/npm-publish@v1
        with:
          token: ${{ secrets.PLATFORM_SA_NPM_TOKEN }}
          access: public
          package: ./sdk/package.json
          tag: ${{ contains(github.event.inputs.release_type, 'alpha') && 'alpha' }}
          dry-run: ${{ github.event.inputs.dry_run }}

      - name: Authenticate NPM
        if: contains(github.event.inputs.release_type, 'release')
        run: npm config set //registry.npmjs.org/:_authToken ${{ secrets.PLATFORM_SA_NPM_TOKEN }}

      - name: Release
        if: contains(github.event.inputs.release_type, 'release')
        run: yarn release --ci --no-increment --no-npm $( ${{ github.event.inputs.dry_run }} && echo "--dry-run" || echo "") --github.tokenRef=${{ secrets.PLATFORM_SA_GITHUB_TOKEN }}
